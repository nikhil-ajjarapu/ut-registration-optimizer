{"version":3,"sources":["components/FormComponent.js","scripts/generateHTMLUrls.js","scripts/generateSchedule.js","scripts/generateOptimalCourseList.js","scripts/data/agg.csv","components/uploadHTMLComponent.js","components/scheduleCreatorComponent.js","App.js","reportWebVitals.js","index.js"],"names":["FormComponent","props","state","classnames","handleChange","bind","handleSubmit","event","this","setState","target","value","preventDefault","includes","urls","classes","i","length","split","field_name","course_number","push","generateHTMLUrls","history","pathname","class","Form","onSubmit","Group","controlId","Label","Control","as","rows","onChange","Button","variant","type","React","Component","withRouter","generateSchedule","innerhtml_text","a","temp_html","document","createElement","innerHTML","allclasses_plusmisc","getElementsByTagName","course_schedule","j","class_info","getAttribute","class_summary","Map","k","set","innerText","get","generateOptimalCourseList","courseMap","csvData","arr_keys","Array","from","keys","allPossibleClassPeriods","course_name","z","course_objs","professors","l","map","prof_str","trim","prototype","apply","records","filter","grade_record","dept","course_nbr","prof","gradeProfessors","instructor","goodgrades","parseInt","totalgrades","gradeRatio","parseFloat","toFixed","toString","instructorTemp","has","console","log","sort","instructor_1","instructor_2","reverse","window","alert","corr_course_objs","course_obj","remain_course_objs","uploadHTMLComponent","fileRefs","fileLabels","location","createRef","index","fileLabels_copy","current","files","name","promises","courseName","fileRef","filePromise","Promise","resolve","reader","FileReader","onload","e","result","result_unique","readAsText","all","then","classList","finalCourseMap","hist","d3","agg_grades","data","possibleClasses","url","id","href","File","label","ref","custom","scheduleCreatorComponent","handleUpdate","generateCalendarEvents","getActiveUnique","courseToUniques","courseNametoActiveInd","colorMap","fieldName","title","instances","uniqueTobgColorInds","bgColors","classObj","undefined","isNaN","size","colorTempInds","colorTemp","text","color","hour","weekStart","startOfWeek","startOfToday","weekStartsOn","hour_split","start_time_split","replace","end_time_split","startTime_","parse","Date","endTime_","startTime","getYear","getMonth","getDay","getHours","getMinutes","getSeconds","endTime","splice","key","b","getTime","currentDate","schedulerData","eventArr","courseObj","days","days_const","indexOf","newEv","startDate","addDays","endDate","className","courseNametoActiveInd_copy","Math","min","max","Container","style","backgroundColor","fluid","Row","Col","xl","Card","width","height","boxShadow","Body","Title","Text","join","dangerouslySetInnerHTML","__html","onClick","Jumbotron","Paper","format","startDayHour","endDayHour","excludedDays","readOnly","mainResourceName","App","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7ae2170d.chunk.js","sourcesContent":["import React from 'react';\nimport { withRouter } from \"react-router-dom\";\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport {generateHTMLUrls} from \"../scripts/generateHTMLUrls.js\";\n\nclass FormComponent extends React.Component {\n    constructor(props) {\n      super(props)\n      this.state = {classnames:''}\n      this.handleChange = this.handleChange.bind(this)\n      this.handleSubmit = this.handleSubmit.bind(this)\n    }\n    \n    handleChange(event) {\n        this.setState({classnames: event.target.value})\n    }  \n\n    handleSubmit(event) {\n        event.preventDefault();\n        if (!this.state.classnames.includes(\"\\n\")) {\n            this.setState({classnames: [this.state.classnames]})\n        };\n        var urls = generateHTMLUrls(this.state.classnames.split(\"\\n\"));\n        this.props.history.push({\n            pathname: '/ut-registration-optimizer/uploadHTML/',\n            state: {urls: urls, classnames: this.state.classnames.split('\\n')}\n        });\n    }\n  \n    render() {\n        return (\n            <div class=\"m-3\">\n                <Form onSubmit={this.handleSubmit}>\n                <Form.Group controlId=\"schoolSchedule.classNames\">\n                    <Form.Label class=\"font-weight-bold\">Enter all your classes below on separate lines (e.g CS 314, CH 320M, etc.). Invalid classes will be ignored when generating schedule. </Form.Label>\n                    <Form.Control as=\"textarea\" rows={5} onChange={this.handleChange.bind(this)} />\n                </Form.Group>\n                <Button variant=\"primary\" type=\"Submit\" value=\"Submit\">Submit</Button>\n                </Form>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(FormComponent);","export const generateHTMLUrls = (classes) => {\n    var urls = []\n    for (var i = 0; i < classes.length; i++) {\n        var [field_name, course_number] = classes[i].split(\" \")\n        if (field_name === \"CS\") {\n            field_name = \"C+S\";\n        }\n        urls.push(\"https://utdirect.utexas.edu/apps/registrar/course_schedule/20219/results/?ccyys=20219&search_type_main=COURSE&fos_cn=\" + field_name + \"&course_number=\" + course_number +\"&x=58&y=26\")\n    }\n    return urls;\n}                                                                                                                                                            \n\n","export const generateSchedule = async (innerhtml_text) => {\n    var temp_html = document.createElement('html');\n    temp_html.innerHTML = innerhtml_text;\n    var allclasses_plusmisc = temp_html.getElementsByTagName('tr');\n    let course_schedule = [];\n    for (var j = 0; j < allclasses_plusmisc.length; j++) {\n        var class_info = allclasses_plusmisc[j].getElementsByTagName('td');\n        if (class_info[0] != null && class_info[0].getAttribute(\"data-th\") === \"Unique\") {\n            // Store all classes + timings\n            let class_summary = new Map();\n            for (var k = 0; k < class_info.length; k++) {\n                if ([\"Unique\", \"Days\",\"Hour\", \"Instructor\", \"Status\"].includes(class_info[k].getAttribute(\"data-th\"))) {\n                    class_summary.set(class_info[k].getAttribute(\"data-th\"), class_info[k].innerText)\n                }\n            }\n            //TODO: add the class_summary to a list that is mapped to a key of the class ID\n            if (class_summary.get(\"Status\").includes(\"open\")) {\n                course_schedule.push(class_summary);\n            }\n        }   \n    } \n    return course_schedule;\n}","export const generateOptimalCourseList = (courseMap, csvData) => {\n    // step 1: find best teacher for each class\n    let arr_keys = Array.from(courseMap.keys()); \n    // for step 2 later on\n    let allPossibleClassPeriods = [];\n    for (var z = 0; z < arr_keys.length; z++) {\n        let course_name = arr_keys[z];\n        let course_objs = courseMap.get(course_name);\n        let professors = [];\n        for (var l = 0; l < course_objs.length; l++) {\n            // split instructor array at 2 spaces to separate all professors, and merge arrays\n            course_objs[l].set(\"Course Name\", course_name);\n            course_objs[l].set(\"instructorTrimmed\", course_objs[l].get(\"Instructor\").split(\"  \").map(prof_str => prof_str.trim()))\n            Array.prototype.push.apply(professors, course_objs[l].get(\"instructorTrimmed\"))\n        }\n        // iterate through teachers, get grade records (csvData is a array of objects), sort by custom sort func\n        // NOTE: consider writing a script that custom generates a dataset (manually appends teachers to existing data)\n        let records = csvData.filter(grade_record => {\n            let final_dept =  grade_record.dept === \"C S\" ? \"CS\" :  grade_record.dept;\n            let csv_courseName = final_dept + \" \" + grade_record.course_nbr;\n            return csv_courseName === course_name && professors.includes(grade_record.prof);\n        });\n        // how to measure better professor? for now: highest percent of As/A-s/B+/Bs from overall grades\n        // TODO: Make this customizable by user (they can set a target grade, or rank all the grades)\n\n        let gradeProfessors = new Map();\n        for (var i = 0; i < records.length; i++) {\n            let instructor = records[i];\n            let goodgrades = parseInt(instructor[\"a2\"]) + parseInt(instructor[\"a3\"]) + parseInt(instructor[\"b1\"]) + parseInt(instructor[\"b2\"]); \n            let totalgrades = goodgrades + parseInt(instructor[\"b3\"]) + parseInt(instructor[\"c1\"]) + parseInt(instructor[\"c2\"]) + parseInt(instructor[\"c3\"]) + parseInt(instructor[\"d1\"]) + parseInt(instructor[\"d2\"]) + parseInt(instructor[\"d3\"]) + parseInt(instructor[\"f\"]);\n            instructor.gradeRatio = (parseFloat(goodgrades) / parseFloat(totalgrades)).toFixed(3).toString();\n            gradeProfessors.set(instructor[\"prof\"], instructor.gradeRatio);\n        }\n        \n        // add gradeRatio to all relevant course_objs, use gradeProfessors here for convenience \n        for (l = 0; l < course_objs.length; l++) {\n            // split instructor array at 2 spaces to separate all professors, and merge arrays\n            let instructorTemp = course_objs[l].get(\"instructorTrimmed\")[0];\n            if (gradeProfessors.has(instructorTemp)) {\n                course_objs[l].set(\"gradeRatio\",parseFloat(gradeProfessors.get(instructorTemp)).toFixed(3).toString());\n            }\n        }\n        console.log(course_objs)\n        records = records.sort(function(instructor_1, instructor_2) {\n            if (instructor_1.gradeRatio < instructor_2.gradeRatio) {\n              return -1;\n            }\n            else if (instructor_1.gradeRatio > instructor_2.gradeRatio) {\n              return 1; \n            }\n            else {\n              return 0;\n            }\n        }).reverse();\n        \n        // step 2: store all possible class periods based on best teacher\n        if (records.length === 0) {\n            window.alert(\"Grades not available for \" + course_name + \"! Using all class listings...\");\n            Array.prototype.push.apply(allPossibleClassPeriods, course_objs)\n        }\n        else {\n            let corr_course_objs = course_objs.filter(course_obj => {\n                return course_obj.get(\"instructorTrimmed\")[0] === records[0].prof;\n            });\n            Array.prototype.push.apply(allPossibleClassPeriods, corr_course_objs);\n            // now add the rest\n            let remain_course_objs = course_objs.filter(course_obj => {\n                return !corr_course_objs.includes(course_obj)\n            });\n            Array.prototype.push.apply(allPossibleClassPeriods, remain_course_objs);\n        } \n    }\n    return allPossibleClassPeriods;\n}","export default __webpack_public_path__ + \"static/media/agg.0fa9fb9c.csv\";","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport {generateSchedule} from \"../scripts/generateSchedule.js\";\nimport {generateOptimalCourseList} from \"../scripts/generateOptimalCourseList.js\"\nimport * as d3 from 'd3';\nimport agg_grades from '../scripts/data/agg.csv';\n\nclass uploadHTMLComponent extends React.Component {\n    constructor(props) {\n      super(props)\n      this.handleChange = this.handleChange.bind(this)\n      this.handleSubmit = this.handleSubmit.bind(this)\n      \n      var fileRefs = [];\n      var fileLabels = [];\n      for (var i = 0; i < this.props.location.state.urls.length; i++) {\n        fileRefs.push(React.createRef())\n        fileLabels.push(\"Select file: \")\n      }\n\n      this.state = {urls: this.props.location.state.urls, fileRefs: fileRefs, fileLabels: fileLabels}\n    }\n    \n    handleChange(index, event) {\n        let fileLabels_copy = this.state.fileLabels;\n        fileLabels_copy[index] = this.state.fileRefs[index].current.files[0].name;\n        this.setState({\n            fileLabels: fileLabels_copy\n        })\n    }  \n\n    async handleSubmit(event) {\n        event.preventDefault();\n        var promises = [];\n        for (var i = 0; i < this.state.fileRefs.length; i++) {\n            let courseName = this.props.location.state.classnames[i];\n            let fileRef = this.state.fileRefs[i];\n            let filePromise = new Promise(resolve => {\n                const reader = new FileReader()\n                reader.onload = async (e) => { \n                    let result_unique = await generateSchedule(e.target.result);\n                    resolve([courseName, result_unique]);\n                };\n                reader.readAsText(fileRef.current.files[0]);\n            });\n            promises.push(filePromise);\n        }\n\n\n        Promise.all(promises).then(classList => {\n            let finalCourseMap = new Map();\n            for (var j = 0; j < classList.length; j++) {\n                finalCourseMap.set(classList[j][0], classList[j][1])\n            }\n            this.setState({finalCourseMap: finalCourseMap});\n            let hist = this.props.history;\n            // process the .csv files in ../data/*    \n            d3.csv(agg_grades).then(function (data) {\n                hist.push({\n                    pathname: '/ut-registration-optimizer/generateSchedule/',\n                    state: {\n                        possibleClasses: generateOptimalCourseList(finalCourseMap, data)\n                    }\n                });\n            });\n            \n        });\n    } \n  \n    render() {\n        return (\n            <div class=\"m-3\">\n                <Form onSubmit={this.handleSubmit}>\n                <Form.Group controlId=\"schoolSchedule.courseListings\">\n                    <Form.Label class=\"font-weight-bold\">Please visit the following URLs, download the HTML (by pressing Command/Ctrl + S), and upload the primary HTML file (you can ignore the other files/folders) to the respective fields below. Incorrectly formatted files will be ignored:</Form.Label>\n                    {this.state.urls.map((url, index) => \n                        <div class=\"p-2\">\n                            <Form.Label id={index} class=\"font-weight\"><strong>URL to download:</strong> <a href={url} >{url}</a></Form.Label>\n                            <Form.File id={index} label={this.state.fileLabels[index]} onChange={this.handleChange.bind(this, index)} ref={this.state.fileRefs[index]} custom />\n                            \n                            <br/>\n                        </div>\n                    )}\n                </Form.Group>\n                <Button variant=\"primary\" type=\"Submit\" value=\"Submit\">Submit</Button>\n                </Form>\n            </div>\n        );\n    }\n}\n\nexport {uploadHTMLComponent};","import React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport Card from 'react-bootstrap/Card';\nimport { ViewState } from '@devexpress/dx-react-scheduler';\nimport { startOfWeek, startOfToday, format } from 'date-fns';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Container from 'react-bootstrap/Container';\nimport Button from 'react-bootstrap/Button';\nimport {\n  Scheduler,\n  Resources,\n  WeekView,\n  Appointments,\n  AppointmentForm,\n} from '@devexpress/dx-react-scheduler-material-ui';\nimport { Row, Col } from 'react-bootstrap';\nimport { addDays, getYear, getMonth, getDay, getHours, getMinutes, getSeconds, getTime, parse} from 'date-fns';\n\n// build out nice UI to allow user to create/modify schedule\n// TODO: also add functionality to add/remove classes from schedule, let user view all of them nicely\nclass scheduleCreatorComponent extends React.Component {\n    constructor(props) {\n      super(props)  \n      this.handleUpdate = this.handleUpdate.bind(this);\n      this.generateCalendarEvents = this.generateCalendarEvents.bind(this);\n      this.getActiveUnique = this.getActiveUnique.bind(this);\n\n      // step 1: map each course name to a list of uniques (in the form of objects), sorted by earliest to latest\n      let courseToUniques = new Map();\n      let courseNametoActiveInd = new Map();\n      let colorMap = [{\n        fieldName: 'color',\n        title: 'Color',\n        instances: [],\n      }];\n      let uniqueTobgColorInds = new Map();\n      let bgColors = [\n        ['#C99C9C', '#D19494', '#D98C8C', '#E08585', '#E87D7D', '#F07575', '#F76E6E', '#FF6666', '#A38F8F', '#AD8585', '#B87A7A', '#C27070', '#CC6666', '#D65C5C', '#E05252', '#EB4747', '#F53D3D', '#FF3333', '#8C7373', '#996666', '#A65959', '#B24D4D', '#BF4040', '#CC3333', '#D92626', '#E61919', '#F20D0D', '#FF0000', '#705C5C', '#7A5252', '#854747', '#8F3D3D', '#993333', '#A32929', '#AD1F1F', '#B81414', '#C20A0A', '#CC0000', '#544545', '#5C3D3D', '#633636', '#6B2E2E', '#732626', '#7A1F1F', '#821717', '#8A0F0F', '#910808', '#990000', '#382E2E', '#3D2929', '#422424', '#471F1F', '#4D1919', '#521414', '#570F0F', '#5C0A0A', '#610505', '#660000'], \n        ['#9CABC9', '#94A8D1', '#8CA6D9', '#85A3E0', '#7DA1E8', '#759EF0', '#6E9CF7', '#6699FF', '#8F96A3', '#8592AD', '#7A8FB8', '#708BC2', '#6688CC', '#5C85D6', '#5281E0', '#477EEB', '#3D7AF5', '#3377FF', '#737B8C', '#667799', '#5973A6', '#4D6EB2', '#406ABF', '#3366CC', '#2662D9', '#195DE6', '#0D59F2', '#0055FF', '#5C6370', '#525F7A', '#475C85', '#3D588F', '#335599', '#2952A3', '#1F4EAD', '#144BB8', '#0A47C2', '#0044CC', '#454A54', '#3D475C', '#364563', '#2E426B', '#264073', '#1F3D7A', '#173B82', '#0F388A', '#083691', '#003399', '#2E3138', '#29303D', '#242E42', '#1F2C47', '#192A4D', '#142952', '#0F2757', '#0A255C', '#052461', '#002266'],\n        ['#BA9CC9', '#BD94D1', '#BF8CD9', '#C285E0', '#C47DE8', '#C775F0', '#C96EF7', '#CC66FF', '#9C8FA3', '#A085AD', '#A37AB8', '#A770C2', '#AA66CC', '#AD5CD6', '#B152E0', '#B447EB', '#B83DF5', '#BB33FF', '#84738C', '#886699', '#8C59A6', '#914DB2', '#9540BF', '#9933CC', '#9D26D9', '#A219E6', '#A60DF2', '#AA00FF', '#695C70', '#6D527A', '#704785', '#743D8F', '#773399', '#7A29A3', '#7E1FAD', '#8114B8', '#850AC2', '#8800CC', '#4F4554', '#523D5C', '#543663', '#572E6B', '#592673', '#5C1F7A', '#5E1782', '#610F8A', '#630891', '#660099', '#352E38', '#36293D', '#382442', '#3A1F47', '#3C194D', '#3D1452', '#3F0F57', '#410A5C', '#420561', '#440066'],\n        ['#C9B29C', '#D1B294', '#D9B28C', '#E0B285', '#E8B27D', '#F0B275', '#F7B26E', '#FFB266', '#A3998F', '#AD9985', '#B8997A', '#C29970', '#CC9966', '#D6995C', '#E09952', '#EB9947', '#F5993D', '#FF9933', '#8C8073', '#998066', '#A68059', '#B2804D', '#BF8040', '#CC8033', '#D98026', '#E68019', '#F2800D', '#FF8000', '#70665C', '#7A6652', '#856647', '#8F663D', '#996633', '#A36629', '#AD661F', '#B86614', '#C2660A', '#CC6600', '#544C45', '#5C4C3D', '#634C36', '#6B4C2E', '#734C26', '#7A4C1F', '#824C17', '#8A4C0F', '#914C08', '#994C00', '#38332E', '#3D3329', '#423324', '#47331F', '#4D3319', '#523314', '#57330F', '#5C330A', '#613305', '#663300'], \n      ];\n\n      for (var i = 0; i < this.props.location.state.possibleClasses.length; i++) {\n        let classObj = this.props.location.state.possibleClasses[i];\n\n        // take care of edge cases\n        if (classObj.get(\"Hour\") === \"\") {\n            this.props.location.state.possibleClasses.splice(i, 1);\n            continue;\n        }\n        // step 1.1: modify the class object to add additional details\n        let gradeRatio = classObj.get(\"gradeRatio\");\n        if (gradeRatio === undefined || isNaN(gradeRatio)) {\n          classObj.set(\"gradeRatioDescription\", \"<strong> Snap! </strong> No grades available. \")\n          classObj.set(\"gradeColor\", \"#000000\")\n          classObj.set(\"shadowColor\", \"10px 10px 50px 50px rgba(168,168,168,1)\")\n        }\n        else if (gradeRatio > 0.70) {\n          classObj.set(\"gradeRatioDescription\", \"<strong>Great! \" + gradeRatio * 100 + \"% </strong> of people got a <strong> B, B+, A-, or A </strong> in this class.\")\n          classObj.set(\"gradeColor\", \"#90ee90\")\n          classObj.set(\"shadowColor\", \"10px 10px 64px 39px rgba(144,238,144,1)\")\n        }\n        else if (gradeRatio > 0.40) {\n          classObj.set(\"gradeRatioDescription\", \"Not bad! <strong>\" + gradeRatio * 100 + \"% </strong> of people got a <strong> B, B+, A-, or A </strong> in this class.\",)\n          classObj.set(\"gradeColor\", \"#fde52f\")\n          classObj.set(\"shadowColor\", \"10px 10px 64px 39px rgba(255,234,71,1)\")\n        }\n        else {\n          classObj.set(\"gradeRatioDescription\", \"Uh oh! Only <strong>\" + gradeRatio * 100 + \"% </strong> of people got a <strong> B, B+, A-, or A </strong> in this class.\")\n          classObj.set(\"gradeColor\", \"#FF5454\")\n          classObj.set(\"shadowColor\", \"10px 10px 64px 39px rgba(255,84,84,1)\")\n        }\n        \n        // update background color\n        if (!uniqueTobgColorInds.has(classObj.get(\"Course Name\"))) {\n          uniqueTobgColorInds.set(classObj.get(\"Course Name\"), [uniqueTobgColorInds.size, 0]);\n        }\n        let colorTempInds = uniqueTobgColorInds.get(classObj.get(\"Course Name\"))\n        let colorTemp = bgColors[colorTempInds[0]][colorTempInds[1] % bgColors[colorTempInds[0]].length]\n        classObj.set(\"bgColor\", colorTemp)\n        uniqueTobgColorInds.set(classObj.get(\"Course Name\"), [colorTempInds[0], colorTempInds[1] + 1])\n        \n\n        // update color render map \n        colorMap[0].instances.push(\n          {\n            text: classObj.get(\"Unique\"),\n            id: classObj.get(\"Unique\"),\n            color: classObj.get(\"bgColor\")\n          }\n        );\n  \n        \n        // update time attributes\n        // get what hours the class is during\n        let hour = classObj.get(\"Hour\");\n        let weekStart = startOfWeek(startOfToday(),  {weekStartsOn: 0});\n        let hour_split = hour.split(\"-\")   \n        let start_time_split = hour_split[0].replace(/[.]+/g, '').trim();\n        let end_time_split = hour_split[1].replace(/[.]+/g, '').trim();\n        \n        // create the time vars\n        let startTime_ = parse(start_time_split, \"h:mm aa\", new Date(0, 0, 0))\n        let endTime_ = parse(end_time_split, \"h:mm aa\", new Date(0, 0, 0))\n        let startTime = new Date(getYear(weekStart), getMonth(weekStart) + 1, getDay(weekStart) - 1, \n            getHours(startTime_), getMinutes(startTime_), getSeconds(startTime_))\n        let endTime = new Date(getYear(weekStart), getMonth(weekStart) + 1, getDay(weekStart) - 1, \n            getHours(endTime_), getMinutes(endTime_), getSeconds(endTime_))\n        classObj.set(\"startTime\", startTime);\n        classObj.set(\"endTime\", endTime);\n\n        // update courseToUniques\n        if (courseToUniques.has(classObj.get(\"Course Name\"))) {\n          courseToUniques.get(classObj.get(\"Course Name\")).push(classObj)\n        }\n        else {\n          courseToUniques.set(classObj.get(\"Course Name\"), [classObj])\n        }\n      }\n      // step 2: set activeInd for each course\n      for (let [key, value] of courseToUniques) {\n          value.sort((a, b) => getTime(a.get(\"startTime\")) - getTime(b.get(\"startTime\")))\n          courseNametoActiveInd.set(key, (value.length / 2 >>0))\n\n      }\n      // step 3: create state\n      this.state = {\n        courseToUniques: courseToUniques,\n        courseNametoActiveInd: courseNametoActiveInd,\n        colorMap: colorMap,\n        currentDate: startOfToday(),\n        getActiveUnique: this.getActiveUnique,\n      }\n      // add after because it relies on a few state elements\n      this.state = {\n        ...this.state,\n        schedulerData: this.generateCalendarEvents(),\n      }\n    }\n\n    // helper function - dynamically creates calendar events every time state is updated \n    generateCalendarEvents() {\n      let eventArr = [];\n      for (let [key, value] of this.state.courseNametoActiveInd) {\n          let courseObj = this.state.courseToUniques.get(key)[value];\n          let days = courseObj.get(\"Days\")\n          // iterate through days and create events\n          const days_const = [\"M\", \"T\", \"W\", \"TH\", \"F\"];\n          for (var j = 0; j < days_const.length; j++) {\n              if (days.includes(days_const[j])) {\n                  // edge case: make sure 'T' from 'TH' is not being read as just 'T'\n                  if ((j === 1 && days[days.indexOf('T') + 1] !== 'H') || j !== 1) {\n                      let newEv = {\n                          startDate: addDays(courseObj.get(\"startTime\"), j+1),\n                          endDate: addDays(courseObj.get(\"endTime\"), j+1),\n                          title: courseObj.get(\"Course Name\"),\n                          color: courseObj.get(\"Unique\"),\n                      };\n                      eventArr.push(newEv);\n                  }\n              }\n          }\n              \n      }\n      return eventArr;\n    }\n\n    // helper function - handles updates from any button clicks\n    handleUpdate(event) {\n      let className = event.target.id.split(\"_\")[0]\n      let courseNametoActiveInd_copy = this.state.courseNametoActiveInd;\n\n      if (event.target.id.includes(\"later\")) {\n        // increment index\n        courseNametoActiveInd_copy.set(className, Math.min(this.state.courseNametoActiveInd.get(className) + 1, this.state.courseToUniques.get(className).length - 1))\n      }\n      else {\n        // decrement index\n        courseNametoActiveInd_copy.set(className, Math.max(this.state.courseNametoActiveInd.get(className) - 1, 0))\n      }\n\n      this.setState({\n        courseNametoActiveInd: courseNametoActiveInd_copy,\n        schedulerData: this.generateCalendarEvents(),\n\n      })\n    }\n\n    // helper function - gets currently active unique based on class name (makes code cleaner)\n    getActiveUnique(courseName) {\n      return this.state.courseToUniques.get(courseName)[this.state.courseNametoActiveInd.get(courseName)];\n    }\n\n    // make fill of card the same fill as the fill of the appointmentts, make colors much easier to look at (predefine them)\n    // build list of unique IDs right below too\n    // potentially automate website download?\n    // build new feature - course registration day\n    //    -have user rank top 2-3 unique ids in each class (or maybe make it text field, tell user they can assign custom ranks for \n    //     registration app or they can just leave the one they liked on the screen and click button?)\n    //    -on next page, show list of all 1 ranked (if unranked, then the one last shown on the screen (last active index))\n    //    -show buttons/panels to offer backups in case a class is taken, if panel is clicked then show the backups in order, then show the rest randomly with the professors name + grade ratio if available next to it\n\n    render() {\n      return (\n        <Container className=\"px-xl-5\" style={{backgroundColor: \"#F9F6F2\"}} fluid>\n          <Row>\n            <Col><p></p></Col>\n          </Row>\n          <Row>\n            <Col><h1 className=\"text-center font-weight-bold\">Course Schedule Builder</h1><br /></Col>\n          </Row>\n          <Row>\n            <Col><h3 className=\"text-center font-weight-light\">Not seeing a class here? It might not have hours assigned yet in the course schedule - check back when it does!</h3><br /></Col>\n          </Row>\n          <Row>\n            {Array.from(this.state.courseToUniques.keys()).map((courseName, index) => \n                <Col xl=\"4\">\n                  <Card className=\"text-center my-xl-5 mx-auto rounded\" style={{width: '23rem', height:'22rem', boxShadow: this.state.getActiveUnique(courseName).get(\"shadowColor\"), backgroundColor: this.state.getActiveUnique(courseName).get(\"bgColor\"), color: \"white\" }}>\n                    <Card.Body className=\"position-relative\">\n                      <Card.Title className=\"mt-lg-3 font-weight-bold\">{courseName}</Card.Title>\n                      <Card.Text className=\"\">\n                        <strong>Instructor(s): </strong>{this.state.getActiveUnique(courseName).get(\"instructorTrimmed\").join(\"; \")}\n                        <br />\n                        <strong>Unique Number: </strong> {this.state.getActiveUnique(courseName).get(\"Unique\")}\n                        <br />\n                        <div style={{color: this.state.getActiveUnique(courseName).get(\"gradeColor\")}} dangerouslySetInnerHTML={{__html: this.state.getActiveUnique(courseName).get(\"gradeRatioDescription\")}} />\n                      </Card.Text>\n                      <Button variant=\"outline-light\" id={courseName + \"_earlier\"} className=\"my-2 position-relative\" onClick={this.handleUpdate}> Move Course Earlier </Button>\n                      <Button variant=\"outline-light\" id={courseName + \"_later\"} className=\"my-2 position-relative\" onClick={this.handleUpdate}> Move Course Later </Button>\n                    </Card.Body>\n                  </Card>\n                </Col>\n            )}\n          </Row>\n          <Row>\n            <Jumbotron>\n              <Paper>\n                <Scheduler height={\"auto\"} data={this.state.schedulerData} >\n                  <ViewState \n                    currentDate={format(this.state.currentDate, \"yyyy-MM-dd\")}\n                  />\n                  <WeekView\n                    startDayHour={7.5}\n                    endDayHour={22}\n                    excludedDays={[0,6]}\n                  />\n                  <Appointments \n                    readOnly\n                  />\n                  <AppointmentForm\n                    readOnly\n                  />\n                  <Resources\n                    data={this.state.colorMap}\n                    mainResourceName=\"color\"\n                  />\n                </Scheduler>\n              </Paper>\n            </Jumbotron>\n          </Row>\n        </Container>\n    );\n  }\n}\n\nexport {scheduleCreatorComponent};","import './App.css';\nimport FormComponent from './components/FormComponent.js';\nimport {uploadHTMLComponent} from \"./components/uploadHTMLComponent.js\"\nimport {scheduleCreatorComponent} from \"./components/scheduleCreatorComponent.js\"\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path=\"/ut-registration-optimizer/\" component={FormComponent}/>\n        <Route path=\"/ut-registration-optimizer/uploadHTML/\" component={uploadHTMLComponent}/>\n        <Route path=\"/ut-registration-optimizer/generateSchedule/\" component={scheduleCreatorComponent} />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}